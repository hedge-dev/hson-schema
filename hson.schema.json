{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "title": "HSON Project",
    "description": "A Hedgehog Set Object Notation Project",
    "type": "object",
    "properties": {
        "version": {
            "description": "The version number of the HSON file format being used. Required.",
            "type": "integer",
            "exclusiveMinimum": 0,
            "default": 1
        },
        "metadata": {
            "description": "Metadata for the project, for editor display purposes.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "The name of the project.",
                    "type": "string"
                },
                "author": {
                    "description": "The author(s) of the project. This should be treated as an arbitrary string in no particular format.",
                    "type": "string"
                },
                "date": {
                    "description": "The date the project was created, in RFC 3339 format (similar to ISO 8601).",
                    "type": "string",
                    "format": "date-time"
                },
                "version": {
                    "description": "The version number of the project. This should be treated as an arbitrary string in no particular format.",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the project.",
                    "type": "string"
                }
            },
            "patternProperties": {
                "\\/+": false
            }
        },
        "objects": {
            "description": "An array containing all of the objects contained within the project.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The UUID (aka GUID) of the object, enclosed in curly brackets to make clear that it is supposed to be parsed as a UUID and NOT as a number. Used to reference the object throughout the project. Can be omitted if referencing the object is not required.",
                        "type": "string",
                        "pattern": "^\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}$",
                        "not": {
                            "pattern": "{00000000-0000-0000-0000-000000000000}"
                        }
                    },
                    "name": {
                        "description": "The name of the object, for editor display purposes.",
                        "type": "string"
                    },
                    "parentId": {
                        "description": "The UUID of the parent object, enclosed in curly brackets to make clear that it is supposed to be parsed as a UUID and NOT as a number. If included, this object is a child of the given parent object, and the object's transform is relative to the parent's transform (which is relative to its parent's transform, and so on).",
                        "type": "string",
                        "pattern": "^\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}$"
                    },
                    "instanceOf": {
                        "description": "The UUID of the object to be instanced, enclosed in curly brackets to make clear that it is supposed to be parsed as a UUID and NOT as a number. If included, this object will inherit all properties that are not included from the instanced object, rather than falling back to the usual defaults. Properties that are included will override the properties of the instanced object.",
                        "type": "string",
                        "pattern": "^\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}$"
                    },
                    "type": {
                        "description": "The type of the object. Required, unless this object is an instance of another object, in which case, it is optional, as it can just be taken from the instanced object.",
                        "type": "string",
                        "minLength": 1
                    },
                    "position": {
                        "description": "The position of the object within 3D space. Specified as a 3-dimensional array, representing a vector3 using left-handed coordinates (X-right, Y-up, and Z-forward), and meters as its units. This position is local to the transform of the parent object (which is local to the transform of its parent object, and so on) if a parent object is specified. Otherwise, this position is global. If not included, the value [ 0.0, 0.0, 0.0 ] will be used as a fallback.",
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 3,
                        "maxItems": 3,
                        "default": [ 0.0, 0.0, 0.0 ]
                    },
                    "rotation": {
                        "description": "The rotation of the object within 3D space. Specified as a 4-dimensional array, representing a quaternion using left-handed coordinates. This rotation is local to the transform of the parent object (which is local to the transform of its parent object, and so on) if a parent object is specified. Otherwise, this rotation is global. If not included, the value [ 0.0, 0.0, 0.0, 1.0 ] will be used as a fallback.",
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 4,
                        "maxItems": 4,
                        "default": [ 0.0, 0.0, 0.0, 1.0 ]
                    },
                    "scale": {
                        "description": "The scaling of the object within 3D space. Specified as a 3-dimensional array, representing a vector3 using left-handed coordinates (X-right, Y-up, and Z-forward), and meters as its units. This scale is local to the transform of the parent object (which is local to the transform of its parent object, and so on) if a parent object is specified. Otherwise, this scale is global. If not included, the value [ 1.0, 1.0, 1.0 ] will be used as a fallback.",
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 3,
                        "maxItems": 3,
                        "default": [ 1.0, 1.0, 1.0 ]
                    },
                    "isEditorVisible": {
                        "description": "Whether the object should be visible in the editor. Note that this is purely for the editor, and has no effect on whether the object is visible or not in-game. When converting, tooling should ignore this value. If not specified, defaults to true.",
                        "type": "boolean",
                        "default": true
                    },
                    "isExcluded": {
                        "description": "Whether the object should be excluded from the scene. If specified as true, editors should (as applicable) hide the object from 3D display, but still show it in the object hierarchy as a disabled object, and provide a mechanism for users to un-exclude it. When converting, tooling should treat excluded objects as if they do not exist, and should simply not write the excluded objects to the resulting file when converting from HSON. If not specified, defaults to false.",
                        "type": "boolean",
                        "default": false
                    },
                    "parameters": {
                        "description": "Named parameters for the object. Any number of JSON objects of any type are allowed here, all of which are always optional. Editor/Game-specific parameters that you want to be editable by all HSON tooling can also go here. Tooling should not rely on any parameters being present. When converting, tooling should, instead, lookup each parameter by its name as needed, and either error-out or fallback to a default value if a required parameter is not present.",
                        "type": "object",
                        "patternProperties": {
                            "\\/+": false
                        }
                    }
                },
                "patternProperties": {
                    "\\/+": false
                },
                "anyOf": [
                    { "required": [ "type" ] },
                    { "required": [ "instanceOf" ]}
                ]
            }
        },
        "patternProperties": {
            "\\/+": false
        }
    },
    "required": [ "version" ]
}
